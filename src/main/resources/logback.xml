<!-- scan 是否定期扫描xml文件， scanPeriod是说扫描周期是30秒 -->
<configuration scan="true" scanPeriod="30 seconds"
	debug="false" packagingData="true">
	<!-- 上下文名称，主要用于区分项目，不同项目不同的日志文件 -->
	<property name="APP_NAME" value="study" />
	<!-- 属性 -->
	<property name="USER_HOME" value="./logs/${APP_NAME}" />

	<!-- appender很重要，一个配置文件会有多个appender -->
	<!-- ConsoleApperder意思是从console中打印出来 -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<!-- 过滤器，一个appender可以有多个 -->
		<!-- 阈值过滤，就是log行为级别过滤，debug及debug以上的信息会被打印出来 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>debug</level>
		</filter>

		<!-- encoder编码规则 -->
		<encoder>
			<!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern> -->
			<!--<pattern>%d %contextName %msg%n</pattern> -->
			<!-- pattern模式 %d时间 %thread 线程名 %level行为级别 %logger logger名称 %method 方法名称 
				%message 调用方法的入参消息 -->
			<pattern>%-4d [%thread] %highlight%-5level %cyan%logger.%-10method -
				%message%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 滚动日志文件，这个比较常用 -->
	<appender name="ROLLINGFILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 当project等于true的时候file就不会起效果 -->
		<prudent>true</prudent>
		<!--<file>${USER_HOME}/logFile.log</file> -->
		<!-- 按天新建log日志 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- daily rollover -->
			<fileNamePattern>${USER_HOME}/logFile.%d{yyyy-MM-dd}_%i.log
			</fileNamePattern>
			<!-- 保留30天的历史日志 -->
			<maxHistory>60</maxHistory>
			<!-- 日志总保存量为30GB -->
			<totalSizeCap>30GB</totalSizeCap>
			<!-- 基于大小和时间，这个可以有，可以没有 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 100MB -->
				<!-- 当一个日志大小大于MB，则换一个新的日志。日志名的%i从0开始，自动递增 -->
				<maxFileSize>128MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<encoder>
			<!-- %ex就是指抛出的异常，full是显示全部，如果在{}中写入数字，则表示展示多少行 -->
			<pattern>%-4date [%thread] %-5level %logger{35} - %msg%n%ex{full,
				DISPLAY_EX_EVAL}
			</pattern>
			<!-- 设置字符集 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- name意思是这个logger管的哪一片，像下面这个管的就是log/test包下的所有文件 level是只展示什么行为信息级别以上的，类似阈值过滤器 
		additivity表示是否再抛出事件，就是说如果有一个logger的name是log，如果这个属性是true，另一个logger就会在这个logger处理完后接着继续处理 -->
	<logger name="me.djin.study.frame" level="DEBUG"
		additivity="false">
		<!-- 连接输出源，也就是上边那几个输出源 ，你可以随便选几个appender -->
		<appender-ref ref="STDOUT" />
		<appender-ref ref="ROLLINGFILE" />
	</logger>
	<!-- mybatis 日志配置 -->
	<logger name="com.apache.ibatis" level="TRACE" />
	<logger name="java.sql.Connection" level="ERROR" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="java.sql.PreparedStatement" level="DEBUG" />

	<!-- 这就是上边logger没有管到的情况下 root默认接管所有logger -->
	<root level="ERROR">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="ROLLINGFILE" />
	</root>
</configuration>